# -*- coding: utf-8 -*-
"""BITCOIN PREDICTION_012.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JGj0XNmcewSppv5V1DWv9hPNM8UYMuvR
"""

from google.colab import drive
drive.mount('/content/drive')

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

data = yf.download('BTC-INR', start='2014-09-17', end='2024-02-07')
data

print("Basic Information:")
print(data.info())

print("\nSummary Statistics:")
print(data.describe())

plt.figure(figsize=(12, 6))
sns.set(style="whitegrid")
sns.lineplot(x=data.index, y=data['Close'])
plt.title('Bitcoin Price Over Time')
plt.xlabel('Date')
plt.ylabel('Closing Price (INR)')
plt.show()

"""DUE TO INR IT COMES IN POWER E NOW IF WE CHANGE IT TO USD LET SEE WHAT HAPPENS"""

data1 = yf.download('BTC-USD', start='2014-09-17', end='2024-02-07')
data1

print("Basic Information:")
print(data1.info())

print("\nSummary Statistics:")
print(data1.describe())

plt.figure(figsize=(12, 6))
sns.set(style="whitegrid")
sns.lineplot(x=data1.index, y=data1['Close'])
plt.title('Bitcoin Price Over Time')
plt.xlabel('Date')
plt.ylabel('Closing Price (USD)')
plt.show()

data1['Daily_Return'] = data1['Close'].pct_change()
plt.figure(figsize=(12, 6))
sns.set(style="whitegrid")
sns.histplot(data1['Daily_Return'].dropna(), bins=50, kde=True)
plt.title('Distribution of Daily Returns')
plt.xlabel('Daily Return')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(12, 6))
sns.set(style="whitegrid")
data1['Close'].plot(label='Bitcoin Price')
data1['Close'].rolling(window=30).mean().plot(label='30-Day Moving Average', linestyle='--', color='red')
plt.title('Bitcoin Price and 30-Day Moving Average')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.legend()
plt.show()

# Scatter plot between closing price and trading volume
plt.figure(figsize=(12, 6))
sns.set(style="whitegrid")
sns.scatterplot(x=data1['Close'], y=data1['Volume'])
plt.title('Scatter Plot: Closing Price vs Trading Volume')
plt.xlabel('Closing Price (USD)')
plt.ylabel('Trading Volume')
plt.show()

# Box plot of daily returns by day of the week
data1['Day_of_Week'] = data1.index.day_name()
plt.figure(figsize=(12, 6))
sns.set(style="whitegrid")
sns.boxplot(x=data1['Day_of_Week'], y=data1['Daily_Return'])
plt.title('Box Plot of Daily Returns by Day of the Week')
plt.xlabel('Day of the Week')
plt.ylabel('Daily Return')
plt.show()

# Import necessary libraries
import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt

# Function to download historical data from Yahoo Finance
def download_data(symbol, start_date, end_date):
    df = yf.download(symbol, start=start_date, end=end_date)
    return df

# Function to create features and target variable
def create_features_target(data):
    data['Date'] = data.index
    data['Date'] = pd.to_datetime(data['Date'])
    data['Days'] = (data['Date'] - data['Date'].min()).dt.days
    features = data[['Days']]
    target = data['Close']
    return features, target

# Function to train and evaluate different regression models
def train_evaluate_models(features, target):
    models = {
        'Linear Regression': LinearRegression(),
        'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42),
        'SVR': SVR(kernel='linear')
    }

    best_model_name = None
    best_model_mse = float('inf')

    for model_name, model in models.items():
        X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

        model.fit(X_train, y_train)

        # Make predictions
        predictions_test = model.predict(X_test)

        # Evaluate the model
        mse_test = mean_squared_error(y_test, predictions_test)

        print(f'Model: {model_name}')
        print(f'Mean Squared Error (Test): {mse_test}')
        print(f'Mean Absolute Error (Test): {mean_absolute_error(y_test, predictions_test)}')
        print(f'R2 Score (Test): {r2_score(y_test, predictions_test)}')

        # Check if the current model is the best
        if mse_test < best_model_mse:
            best_model_mse = mse_test
            best_model_name = model_name

        # Plot the results
        plt.figure(figsize=(12, 6))
        plt.scatter(features, target, color='black', label='Actual data')
        plt.plot(features, model.predict(features), color='blue', linewidth=3, label=f'{model_name} model')
        plt.title(f'Bitcoin Price Prediction - {model_name}')
        plt.xlabel('Days')
        plt.ylabel('Bitcoin Price (Close)')
        plt.legend()
        plt.show()

    print(f'Best Model based on Mean Squared Error: {best_model_name} with MSE: {best_model_mse}')

# Main function
def main():
    # Download historical data
    symbol = 'BTC-USD'
    start_date = '2020-01-01'
    end_date = '2022-01-01'
    data = download_data(symbol, start_date, end_date)

    # Create features and target variable
    features, target = create_features_target(data)

    # Train and evaluate different models
    train_evaluate_models(features, target)

if __name__ == "__main__":
    main()